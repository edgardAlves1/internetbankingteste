package com.santander.ib.util;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;

public class TransactionFeeUtil {
	
	private static int decimalComparisonLower = -1;
	private static int decimalComparisonEquals = 0; 
	private static int decimalComparisonHigher = 1;
	
	public static BigDecimal calculateWithdrawFee(BigDecimal withdrawValue) {
		int comparation_withdrawValue100 = withdrawValue.compareTo(new BigDecimal(100));
		int comparation_withdrawValue300 = withdrawValue.compareTo(new BigDecimal(300));
		
		
		 if( comparation_withdrawValue100 == decimalComparisonLower || comparation_withdrawValue100 == decimalComparisonEquals) {
			 System.out.println("Valor do saque: " + withdrawValue);
			return withdrawValue;
		} else if( (comparation_withdrawValue100 == decimalComparisonHigher) && 
				( comparation_withdrawValue300 == decimalComparisonLower || comparation_withdrawValue300 == decimalComparisonEquals)) {
			return getWithdrawWithLowerFee(withdrawValue);
		} else {
			return getWithdrawWithMaxFee(withdrawValue);
		}
	}
	
	private static BigDecimal getWithdrawWithLowerFee(BigDecimal withdrawValue) {
        BigDecimal percentageValue = new BigDecimal("0.4");

        BigDecimal valorDecimal = percentageValue.divide(new BigDecimal("100"));
        BigDecimal fee = withdrawValue.multiply(valorDecimal);
        BigDecimal totalWithdrawValue = withdrawValue.add(fee);
        
        System.out.println("Valor do saque: " + totalWithdrawValue);
        return totalWithdrawValue;
	}
	
	private static BigDecimal getWithdrawWithMaxFee(BigDecimal withdrawValue) {
        BigDecimal percentageValue = new BigDecimal("1");

        BigDecimal valorDecimal = percentageValue.divide(new BigDecimal("100"));
        BigDecimal fee = withdrawValue.multiply(valorDecimal);
        BigDecimal totalWithdrawValue = withdrawValue.add(fee);
        
        System.out.println("Valor do saque: " + totalWithdrawValue);
        return totalWithdrawValue;
	}
	
	public String formatToLocalCurrency(BigDecimal value) {
		Locale brasil = new Locale("pt", "BR");
		NumberFormat coinFormat = NumberFormat.getCurrencyInstance(brasil);

		return coinFormat.format(value);
	}
}